{"version":3,"sources":["components/PictureCard/PictureCard.js","components/Wrapper/Wrapper.js","App.js","serviceWorker.js","index.js"],"names":["PictureCard","props","react_default","a","createElement","className","alt","name","src","image","onClick","clickImage","id","Wrapper","shakeWrapper","pictures","App","state","cards","clickedArray","highscore","score","message","shakeit","randomArray","_this","setState","includes","concat","array","i","length","j","Math","floor","random","_ref","_this2","this","components_Wrapper_Wrapper","map","picture","components_PictureCard_PictureCard","key","Component","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","src_App_0","document","getElementById","URL","process","href","origin","addEventListener","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.e7fdbd88.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./PictureCard.css\";\r\n\r\nconst PictureCard = props => (\r\n  <div className=\"card\">\r\n    <div className=\"img-container\">\r\n      <img className=\"img-thumbnail img-responsive\" alt={props.name} src={props.image} onClick={() => props.clickImage(props.id)}/>\r\n    </div>\r\n  </div>\r\n);\r\n\r\nexport default PictureCard;","import React from \"react\";\r\nimport \"./Wrapper.css\";\r\n\r\nconst Wrapper = props => <div className= {props.shakeWrapper===\"true\" ? \"wrapperShake\" : \"wrapper\"}>{props.pictures}</div>;\r\n\r\nexport default Wrapper;","import React, { Component } from 'react';\nimport './App.css';\nimport PictureCard from \"./components/PictureCard/PictureCard\";\nimport Wrapper from \"./components/Wrapper/Wrapper\";\nimport cards from \"./cards.json\";\n\nclass App extends Component {\n  // Setting this.state.cards to the cards json array\n  state = {\n    cards,\n    clickedArray: [],\n    highscore: 0,\n    score: 0,\n    message: \"\",\n    shakeit: \"false\"\n  };\n  clickImage = id => {\n    \n    const randomArray = this.randomArray(cards);\n    this.setState({cards: randomArray});\n    \n    if (this.state.clickedArray.includes(id)) {\n      this.setState({ score: 0, clickedArray: [], message: \"Incorrect!\", shakeit: \"true\"});\n    }\n    else {\n      this.setState({\n        clickedArray: this.state.clickedArray.concat([id]),\n        score: this.state.score + 1,\n        message: \"Correct\",\n        shakeit: \"false\"\n      });\n    }\n    \n    if (this.state.score > this.state.highscore) {\n      this.setState({ highscore: this.state.score });\n    }\n    \n  }\n  \n  randomArray = (array) => {\n      for (let i = array.length - 1; i > 0; i--) {\n          const j = Math.floor(Math.random() * (i + 1));\n          [array[i], array[j]] = [array[j], array[i]];\n      }\n      return array;\n  }\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          \n          <h1 className=\"App-title\">Welcome to React Clicky Game!!</h1>\n        </header>\n        <h3 className=\"App-intro\">\n          <strong>Click on an image to earn points, but don't click on any, more than once!</strong> \n          <p className = \"score\"><strong>Score: {this.state.score} | TopScore: {this.state.highscore}</strong></p>\n          <p className=\"message\"><strong>{this.state.message}</strong></p>\n        </h3>\n        <Wrapper\n        shakeWrapper = {this.state.shakeit}\n        pictures=\n          {this.state.cards.map(picture => (\n            <PictureCard\n              clickImage={this.clickImage}\n              id={picture.id}\n              key={picture.id} // to get rid of unique key prop warning\n              name={picture.name}\n              image={picture.image}\n            />\n          ))}\n        />\n        \n      </div>\n    );\n  }\n}\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}